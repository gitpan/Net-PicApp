.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::PicApp 3"
.TH Net::PicApp 3 "2010-01-28" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::PicApp \- A toolkit for interacting with the PicApp service.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&   my $picapp = Net::PicApp\->new({
\&    apikey => \*(Aq4d8c591b\-e2fc\-42d2\-c7d1\-xxxabc00d000\*(Aq
\&   });
\&   my $response = $picapp\->search(\*(Aqcats\*(Aq);
\&   if ($response\->is_success) {
\&     foreach my $img (@{$response\->images}) {
\&       print $img\->imageTitle . "\en";
\&     }
\&   } else {
\&     die $picapp\->error_message;
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a convenient interface to the PicApp web service.
It requires that you have been given an \s-1API\s0 Key by PicApp.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.IP "PicApp \s-1API\s0 Key" 4
.IX Item "PicApp API Key"
.PD 0
.IP "XML::Simple" 4
.IX Item "XML::Simple"
.IP "\s-1LWP\s0" 4
.IX Item "LWP"
.PD
.SH "USAGE"
.IX Header "USAGE"
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "\fBsearch($terms, \fB%options\fB)\fR" 4
.el .IP "\fBsearch($terms, \f(CB%options\fB)\fR" 4
.IX Item "search($terms, %options)"
This function receives a term for searching and retrieves the results in \s-1XML\s0.
This function allows the user to send search parameters in addition to the 
search term, corresponding to advanced search options in the www.picapp.com 
website.
.Sp
\&\fBSearch Options:\fR
.RS 4
.ie n .IP """no_cache"" \- if set to true, then the cache will be forcibly bypassed for this one request" 4
.el .IP "\f(CWno_cache\fR \- if set to true, then the cache will be forcibly bypassed for this one request" 4
.IX Item "no_cache - if set to true, then the cache will be forcibly bypassed for this one request"
.PD 0
.ie n .IP """with_thumbnails"" \- boolean" 4
.el .IP "\f(CWwith_thumbnails\fR \- boolean" 4
.IX Item "with_thumbnails - boolean"
.ie n .IP """category"" \- ""Editorial"" or ""Creative"" (default: all)" 4
.el .IP "\f(CWcategory\fR \- ``Editorial'' or ``Creative'' (default: all)" 4
.IX Item "category - Editorial or Creative (default: all)"
.ie n .IP """subcategory"" \- A sub-category by which to filter. See Constants." 4
.el .IP "\f(CWsubcategory\fR \- A sub-category by which to filter. See Constants." 4
.IX Item "subcategory - A sub-category by which to filter. See Constants."
.ie n .IP """colors"" \- ""\s-1BW\s0"" or ""Color"" (default both)" 4
.el .IP "\f(CWcolors\fR \- ``\s-1BW\s0'' or ``Color'' (default both)" 4
.IX Item "colors - BW or Color (default both)"
.ie n .IP """orientation"" \- ""Horizontal"" or ""Vertical"" or ""Panoramic"" (default: all)" 4
.el .IP "\f(CWorientation\fR \- ``Horizontal'' or ``Vertical'' or ``Panoramic'' (default: all)" 4
.IX Item "orientation - Horizontal or Vertical or Panoramic (default: all)"
.ie n .IP """types"" \- ""Photography"" or ""Illustration"" (default: all)" 4
.el .IP "\f(CWtypes\fR \- ``Photography'' or ``Illustration'' (default: all)" 4
.IX Item "types - Photography or Illustration (default: all)"
.ie n .IP """match_phrase"" \- ""AllTheseWords"" or ""ExactPhrase"" or ""AnyTheseWords"" or ""FreeText""" 4
.el .IP "\f(CWmatch_phrase\fR \- ``AllTheseWords'' or ``ExactPhrase'' or ``AnyTheseWords'' or ``FreeText''" 4
.IX Item "match_phrase - AllTheseWords or ExactPhrase or AnyTheseWords or FreeText"
.ie n .IP """time_period"" \- ""Today"" or ""Yesterday"" or ""Last3Days"" or ""LastWeek"" or ""LastMonth"" or ""Last3Months"" or ""Anytime""" 4
.el .IP "\f(CWtime_period\fR \- ``Today'' or ``Yesterday'' or ``Last3Days'' or ``LastWeek'' or ``LastMonth'' or ``Last3Months'' or ``Anytime''" 4
.IX Item "time_period - Today or Yesterday or Last3Days or LastWeek or LastMonth or Last3Months or Anytime"
.ie n .IP """sort"" \- How to sort the results (by relevancy, by recency, or randomly). See Constants." 4
.el .IP "\f(CWsort\fR \- How to sort the results (by relevancy, by recency, or randomly). See Constants." 4
.IX Item "sort - How to sort the results (by relevancy, by recency, or randomly). See Constants."
.ie n .IP """page"" \- This parameter depicts the page number (1 and above) to be retrieved from the system." 4
.el .IP "\f(CWpage\fR \- This parameter depicts the page number (1 and above) to be retrieved from the system." 4
.IX Item "page - This parameter depicts the page number (1 and above) to be retrieved from the system."
.ie n .IP """total_records"" \- This parameter indicates the maximal number of results requested from Picapp (1 and above)." 4
.el .IP "\f(CWtotal_records\fR \- This parameter indicates the maximal number of results requested from Picapp (1 and above)." 4
.IX Item "total_records - This parameter indicates the maximal number of results requested from Picapp (1 and above)."
.RE
.RS 4
.PD
.Sp
\&\fBUsage Notes:\fR
.Sp
If \f(CW\*(C`with_thumbnails\*(C'\fR has been specified and is true, then this function will 
retrieve the search results upon user definitions with extra rectangular 
cropped thumbnails on top of the regular thumbnail. These thumbnails will be 
available in the response object.
.Sp
If \f(CW\*(C`subcategory\*(C'\fR \s-1OR\s0 \f(CW\*(C`contributor\*(C'\fR has been specified then this function will 
also filter the search results by image contributor (Getty, Corbis, Splash,
 etc..) and by image category (news, creative, sports, etc..)
.RE
.ie n .IP "\fBget_image_details($id, \fB$options\fB)\fR" 4
.el .IP "\fBget_image_details($id, \f(CB$options\fB)\fR" 4
.IX Item "get_image_details($id, $options)"
This function receives the unique key and the image \s-1ID\s0 (the image \s-1ID\s0 received 
from the search \s-1XML\s0 results).
.Sp
\&\fBOptions:\fR
.RS 4
.ie n .IP """no_cache"" \- if set to true, then the cache will be forcibly bypassed for this one request" 4
.el .IP "\f(CWno_cache\fR \- if set to true, then the cache will be forcibly bypassed for this one request" 4
.IX Item "no_cache - if set to true, then the cache will be forcibly bypassed for this one request"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "\fBdoes_user_exist($username, \fB$password\fB)\fR" 4
.el .IP "\fBdoes_user_exist($username, \f(CB$password\fB)\fR" 4
.IX Item "does_user_exist($username, $password)"
.PD
This function receives a login name a password and retrieves an xml with the 
user details.
.ie n .IP "\fBpublish( \fB$id\fB, \f(BI$terms\fB, \f(CB$email\fB, \f(CB$options\fB )\fR" 4
.el .IP "\fBpublish( \f(CB$id\fB, \f(CB$terms\fB, \f(CB$email\fB, \f(CB$options\fB )\fR" 4
.IX Item "publish( $id, $terms, $email, $options )"
This function receives an image \s-1ID\s0, the search terms used to find the image and an email address
and then retrieves the script in \s-1XML\s0.
.Sp
\&\fBOptions:\fR
.RS 4
.ie n .IP """size"" \- 1 depicts 234, 2 depicts 350 and 3 depicts 420" 4
.el .IP "\f(CWsize\fR \- 1 depicts 234, 2 depicts 350 and 3 depicts 420" 4
.IX Item "size - 1 depicts 234, 2 depicts 350 and 3 depicts 420"
.PD 0
.ie n .IP """image_frame"" \-" 4
.el .IP "\f(CWimage_frame\fR \-" 4
.IX Item "image_frame -"
.RE
.RS 4
.RE
.PD
.Sh "\s-1CONSTANTS\s0"
.IX Subsection "CONSTANTS"
The following constants have been defined to assist in specifying the 
appropriate values to a search request:
.PP
\fIContributors\fR
.IX Subsection "Contributors"
.IP "\s-1CONTRIB_CORBIS\s0" 4
.IX Item "CONTRIB_CORBIS"
.PD 0
.IP "\s-1CONTRIB_ENTERTAINMENT_PRESS\s0" 4
.IX Item "CONTRIB_ENTERTAINMENT_PRESS"
.IP "\s-1CONTRIB_GETTY\s0" 4
.IX Item "CONTRIB_GETTY"
.IP "\s-1CONTRIB_IMAGE_SOURCE\s0" 4
.IX Item "CONTRIB_IMAGE_SOURCE"
.IP "\s-1CONTRIB_JUPITER\s0" 4
.IX Item "CONTRIB_JUPITER"
.IP "\s-1CONTRIB_NEWSCOM\s0" 4
.IX Item "CONTRIB_NEWSCOM"
.IP "\s-1CONTRIB_PACIFIC_COAST\s0" 4
.IX Item "CONTRIB_PACIFIC_COAST"
.IP "\s-1CONTRIB_SPLASH\s0" 4
.IX Item "CONTRIB_SPLASH"
.PD
.PP
\fISub-Categories\fR
.IX Subsection "Sub-Categories"
.IP "\s-1CAT_EDITORIAL\s0" 4
.IX Item "CAT_EDITORIAL"
.PD 0
.IP "\s-1CAT_CREATIVE\s0" 4
.IX Item "CAT_CREATIVE"
.IP "\s-1CAT_ENTERTAINMENT\s0" 4
.IX Item "CAT_ENTERTAINMENT"
.IP "\s-1CAT_NEWS\s0" 4
.IX Item "CAT_NEWS"
.IP "\s-1CAT_SPORTS\s0" 4
.IX Item "CAT_SPORTS"
.PD
.PP
\fISort Values\fR
.IX Subsection "Sort Values"
.IP "\s-1SORT_RELEVANT\s0" 4
.IX Item "SORT_RELEVANT"
.PD 0
.IP "\s-1SORT_RECENT\s0" 4
.IX Item "SORT_RECENT"
.IP "\s-1SORT_RANDOM\s0" 4
.IX Item "SORT_RANDOM"
.PD
.Sh "\s-1INITIALIZATION\s0 \s-1OPTIONS\s0"
.IX Subsection "INITIALIZATION OPTIONS"
Each of the following options are also accessors on the main
Net::PicApp object.
.IP "\fBapikey\fR" 4
.IX Item "apikey"
The \s-1API\s0 Key given to you by PicApp for accessing the service.
.IP "\fBurl\fR" 4
.IX Item "url"
The base \s-1URL\s0 of the PicApp service. Defaults to: 'http://api.picapp.com/API/ws.asmx'
.IP "\fBcache\fR" 4
.IX Item "cache"
A Cache object to use for caching results.
.SH "CACHING"
.IX Header "CACHING"
Responses returned by Amazon's web service can be cached locally. 
Net::Amazon's new method accepts a reference to a Cache object. 
Cache (or one of its companions like Cache::Memory, Cache::File, 
etc.) can be downloaded from \s-1CPAN\s0, please check their documentation 
for details. In fact, any other type of cache implementation 
will do as well, see the requirements below.
.PP
Here's an example utilizing a file cache which causes Net::PicApp
to cache responses for 30 minutes:
.PP
.Vb 1
\&    use Cache::File;
\&
\&    my $cache = Cache::File\->new( 
\&        cache_root        => \*(Aq/tmp/mycache\*(Aq,
\&        default_expires   => \*(Aq30 min\*(Aq,
\&    );
\&
\&    my $picapp = Net::PicApp\->new(
\&        apikeykey  => \*(AqYOUR_APIKEY\*(Aq,
\&        cache       => $cache,
\&    );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "VERSION CONTROL"
.IX Header "VERSION CONTROL"
<http://github.com/byrnereese/perl\-Net\-PicApp>
.SH "AUTHORS and CREDITS"
.IX Header "AUTHORS and CREDITS"
Author: Byrne Reese <byrne@majordojo.com>
